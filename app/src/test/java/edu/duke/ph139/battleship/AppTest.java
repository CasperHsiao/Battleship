/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ph139.battleship;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringReader;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

class AppTest {

  private App generate_basic_app_for_stringReader(ByteArrayOutputStream bytes, int w, int h, String placements) {
    StringReader sr = new StringReader(placements);
    PrintStream ps = new PrintStream(bytes, true);
    Board<Character> b = new BattleShipBoard<>(w, h);
    return new App(b, sr, ps);
  }

  @Test
  public void test_read_placement() throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    App app = generate_basic_app_for_stringReader(bytes, 10, 20, "B2V\nC8H\na4v\n");
    String prompt = "Please enter a location for a ship:";
    Placement[] expected = new Placement[3];
    expected[0] = new Placement(new Coordinate(1, 2), 'V');
    expected[1] = new Placement(new Coordinate(2, 8), 'H');
    expected[2] = new Placement(new Coordinate(0, 4), 'V');
    for (int i = 0; i < expected.length; i++) {
      Placement p = app.readPlacement(prompt);
      assertEquals(p, expected[i]);
      assertEquals(prompt + "\n", bytes.toString());
      bytes.reset();
    }
  }

  @Test
  public void test_do_one_placement() throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    App app = generate_basic_app_for_stringReader(bytes, 4, 3, "B2V\nA2H\nc0v\n");
    String prompt = "Where would you like to put your ship?";
    app.doOnePlacement();
    String expectedHeader = "  0|1|2|3\n";
    String expectedBody = "A  | | |  A\n" + "B  | |s|  B\n" + "C  | | |  C\n";
    String expected = expectedHeader + expectedBody + expectedHeader;
    assertEquals(prompt + "\n" + expected, bytes.toString());
    bytes.reset();

    app.doOnePlacement();
    expectedBody = "A  | |s|  A\n" + "B  | |s|  B\n" + "C  | | |  C\n";
    expected = expectedHeader + expectedBody + expectedHeader;
    assertEquals(prompt + "\n" + expected, bytes.toString());
    bytes.reset();

    app.doOnePlacement();
    expectedBody = "A  | |s|  A\n" + "B  | |s|  B\n" + "C s| | |  C\n";
    expected = expectedHeader + expectedBody + expectedHeader;
    assertEquals(prompt + "\n" + expected, bytes.toString());
    bytes.reset();

  }

  @Test
  public void test_main() throws IOException {
    test_main_helper("input1.txt", "output1.txt");
  }

  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  private void test_main_helper(String inputFilename, String outputFilename) throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    // create a InputStream for input.txt file
    InputStream input = getClass().getClassLoader().getResourceAsStream(inputFilename);
    assertNotNull(input);
    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream(outputFilename);
    assertNotNull(expectedStream);
    // remember the current System.in/.out
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;
    try {
      System.setIn(input);
      System.setOut(out);
      App.main(new String[0]);
    } finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }
    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    assertEquals(expected, actual);
  }
}
